/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets;

/**
 * Ingrid Daubechies orthonormalized wavelet using 38 coefficients.
 * 
 * @date 19.10.2010 15:24:26
 * @author Christian Scheiblich
 */
public class Daub38 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using 38 coefficients. WAVELET
   * NOT TESTED YET!
   * 
   * @date 19.10.2010 15:24:26
   * @author Christian Scheiblich
   */
  public Daub38( ) {

    // WAVELET NOT TESTED YET!

    _waveLength = 76;

    _scales = new double[ _waveLength ]; // can be done in static way also; faster?

    double[ ] scales = {
        1.425776641674131672055420247567865803211784397464191115245081e-06,
        3.576251994264023012742569014888876217958307227940126418281357e-05,
        4.211702664727116432247014444906469155300573201130549739553848e-04,
        3.083088119253751774288740090262741910177322520624582862578292e-03,
        1.563724934757215617277490102724080070486270026632620664785632e-02,
        5.788994361285925649727664279317241952513246287766481213301801e-02,
        1.600719935641106973482800861166599685169395465055048951307626e-01,
        3.307757814110146511493637534404611754800768677041577030757306e-01,
        4.965911753117180976599171147718708939352414838951726087564419e-01,
        4.933560785171007975728485346997317064969513623594359091115804e-01,
        2.130505713555785138286743353458562451255624665951160445122307e-01,
        -1.828676677083358907975548507946239135218223185041410632924815e-01,
        -3.216756378089978628483471725406916361929841940528189059002548e-01,
        -6.226650604782432226643360160478765847565862101045597180310490e-02,
        2.321259638353531085028708104285994998671615563662858079262996e-01,
        1.499851196187170199586403453788927307298226028262603028635758e-01,
        -1.417956859730596216710053144522330276392591055375830654519080e-01,
        -1.599125651582443618288533214523534937804208844386102639177693e-01,
        8.563812155615105741612217814369165313487129645536001850276987e-02,
        1.414147340733826800884683119379170594092606174915755283496153e-01,
        -5.658645863072738145681787657843320646815509410635114234947902e-02,
        -1.147311707107443752394144019458942779715665489230169950201022e-01,
        4.309589543304764288137871223616030624246568683595408792078602e-02,
        8.720439826203975011910714164154456762073786124233088471855868e-02,
        -3.660510340287429567372071039506772372567938710943432838908247e-02,
        -6.176620870841315993604736705613246241897497782373337911398117e-02,
        3.198987753153780630818381136366859026137035450576631134176875e-02,
        4.005498110511594820952087086241114309038577379366732959648548e-02,
        -2.689149388089451438550851767715967313417890393287236700072071e-02,
        -2.311413402054931680856913553585621248925303865540203357180768e-02,
        2.090464525565524340215982365351342094670261491526831672682244e-02,
        1.129049727868596484270081487761544232851115891449843967151657e-02,
        -1.470188206539868213708986402816605045648481224662435114088245e-02,
        -4.131306656031089274123231103326745723188134548520938157995702e-03,
        9.214785032197180512031534870181734003522861645903894504302286e-03,
        5.625715748403532005741565594881148757066703437214522101740941e-04,
        -5.071314509218348093935061417505663002006821323958752649640329e-03,
        7.169821821064019257784165364894915621888541496773370435889585e-04,
        2.400697781890973183892306914082592143984140550210130139535193e-03,
        -8.448626665537775009068937851465856973251363010924003314643612e-04,
        -9.424614077227377964015942271780098283910230639908018778588910e-04,
        5.810759750532863662020321063678196633409555706981476723988312e-04,
        2.817639250380670746018048967535608190123523180612961062603672e-04,
        -3.031020460726611993600629020329784682496477106470427787747855e-04,
        -4.555682696668420274688683005987764360677217149927938344795290e-05,
        1.262043350166170705382346537131817701361522387904917335958705e-04,
        -1.155409103833717192628479047983460953381959342642374175822863e-05,
        -4.175141648540397797296325065775711309197411926289412468280801e-05,
        1.334176149921350382547503457286060922218070031330137601427324e-05,
        1.037359184045599795632258335010065103524959844966094870217687e-05,
        -6.456730428469619160379910439617575420986972394137121953806236e-06,
        -1.550844350118602575853380148525912999401292473185534395740371e-06,
        2.149960269939665207789548199790770596890252405076394885606038e-06,
        -8.487087586072593071869805266089426629606479876982221840833098e-08,
        -5.187733738874144426008474683378542368066310000602823096009187e-07,
        1.396377545508355481227961581059961184519872502493462010264633e-07,
        8.400351046895965526933587176781279507953080669259318722910523e-08,
        -4.884757937459286762082185411608763964041010392101914854918157e-08,
        -5.424274800287298511126684174854414928447521710664476410973981e-09,
        1.034704539274858480924046490952803937328239537222908159451039e-08,
        -1.436329487795135706854539856979275911183628476521636251660849e-09,
        -1.349197753983448821850381770889786301246741304307934955997111e-09,
        5.261132557357598494535766638772624572100332209198979659077082e-10,
        6.732336490189308685740626964182623159759767536724844030164551e-11,
        -8.278256522538134727330692938158991115335384611795874767521731e-11,
        1.101692934599454551150832622160224231280195362919498540913658e-11,
        6.291537317039508581580913620859140835852886308989584198166174e-12,
        -2.484789237563642857043361214502760723611468591833262675852242e-12,
        2.626496504065252070488282876470525379851429538389481576454618e-14,
        1.808661236274530582267084846343959377085922019067808145635263e-13,
        -4.249817819571463006966616371554206572863122562744916796556474e-14,
        -4.563397162127373109101691643047923747796563449194075621854491e-16,
        2.045099676788988907802272564402310095398641092819367167252952e-15,
        -4.405307042483461342449027139838301611006835285455050155842865e-16,
        4.304596839558790016251867477122791508849697688058169053134463e-17,
        -1.716152451088744188732404281737964277713026087224248235541071e-18 };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub38

} // class
